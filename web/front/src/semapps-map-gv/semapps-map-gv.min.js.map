{"version":3,"sources":["web/front/src/semapps-map-gv/semapps-map-gv.js"],"names":["Polymer","is","properties","route","type","Object","observer","pins","Array","value","pinsRegistry","attached","_this","this","ready","$gvMap","document","getElementById","groups","querySelectorAll","listSelection","listFillers","legendList","children","forEach","e","id","selection","querySelector","fill","push","$","console","log","hoverActive","semapps","schema","SemAppsCarto","start","bind","_this2","each","buildings","building","i","filler","on","buildingHighlight","buildingHighlightOff","key","mapIsOver","buildingHighlighted","zone","classList","add","remove","buildingHideAll","_this3","mapTimeout","clearTimeout","setTimeout","buildingHighlightReset","activate","buildingClick","domSearchTextInput","buildingSelect","reloadSearch","buildingSelected","deselect","selected","buildingSelectedAll","select","goSearch","pinShow","text","show","pinShowOne","pinHideAll","pinHide","hide"],"mappings":"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","file":"semapps-map-gv.min.js","sourcesContent":["Polymer({\n    is: 'semapps-map-gv',\n    properties: {\n      route: {\n        type: Object,\n        observer: '_routeChanged'\n      },\n      pins: {\n        type: Array,\n        value: []\n      },\n      pinsRegistry: {\n        type: Object,\n        value: {}\n      }\n    },\n\n    attached() {\n        this.ready = false;\n        this.$gvMap = document.getElementById('semapps-map-gv');\n        let groups = this.$gvMap.querySelectorAll(\"svg > g\");\n        this.listSelection = [];\n        this.listFillers = []; \n        this.legendList = groups[14].children;\n\n        \n        groups.forEach(e => {\n\n            if (e.id == \"Lingerie\"){\n                let selection = e.querySelector(\"[id='Selection_9_'] polygon\");\n                let fill = e.querySelector(\"[id='Fill_9_'] polygon\")\n                if (selection && selection != \"\" && fill && fill != \"\"){\n                    this.listSelection.push($(selection));\n                    this.listFillers.push($(fill));\n                }\n            }\n            else if(e.id == \"Cour_de_la_Chapelle_1_\") {\n                let selection = e.querySelector(\"[id='Selection_2_'] > g path\");\n                let fill = e.querySelector(\"[id='Fill_2_'] > g path\")\n                if (selection && selection != \"\" && fill && fill != \"\"){\n                    this.listSelection.push($(selection));\n                    this.listFillers.push($(fill));\n                }\n            } else {\n                let selection = e.querySelector(\"[id^='Selection_'] path\");\n                let fill = e.querySelector(\"[id^='Fill_'] path\")\n                if (selection && selection != \"\" && fill && fill != \"\"){\n                    this.listSelection.push($(selection));\n                    this.listFillers.push($(fill));\n                }\n            }\n        });\n        console.log('this.listSelection :', this.listSelection);\n        console.log('this.listFillers :', this.listFillers);\n        this.hoverActive = true;\n        // Global ref.\n        semapps.schema = this;\n\n        SemAppsCarto.ready(this.start.bind(this));\n    },\n\n    start(){\n\n        // Create pins. \n        let pins = [];\n        $.each(semapps.buildings, (building) => {\n            pins.push(building);\n        });\n\n        this.pins = pins;\n        \n        let i = 0;\n        for (let building in this.listSelection){\n\n            let filler = this.listFillers[i];\n            this.listSelection[building].on('mouseover', (e) => {\n                console.log(\"Passing on : \", filler);\n                this.hoverActive && this.buildingHighlight(filler[0]);\n            })\n            .on('mouseout', (e) => {\n                this.hoverActive && this.buildingHighlightOff(filler[0]);\n            })\n            // Click.\n            .on('click', (e) => {\n                //let key = filler[0].getAttribute('id').split('-')[1];\n                // Launch search.\n                //this.buildingClick(key);\n                // Disable hover temporally.\n                this.hoverActive = false;\n                // Scroll.\n                // semapps.scrollToContent(() => {\n                //   \"use strict\";\n                //   this.hoverActive = true;\n                // });\n            });\n            i++;\n      }\n\n      //this.buildingSelect(semapps.buildingSelected, false);\n    },\n\n    buildingHighlight(key) {\n      // Deselect if already selected.\n      this.buildingHighlightOff();\n      this.mapIsOver = true;\n      this.buildingHighlighted = key;\n      let zone = this.buildingHighlighted;\n      if (zone) {\n          console.log('zone :', zone);\n        zone.classList.add('strong');\n        zone.classList.remove('discreet');\n        // Hide all.\n        this.buildingHideAll(true);\n      }\n      else {\n        // Display all.\n        this.buildingHideAll(false);\n      }\n    },\n  \n    buildingHighlightOff() {\n      if (this.buildingHighlighted) {\n        this.buildingHighlighted.classList.remove('strong');\n        delete this.buildingHighlighted;\n      }\n      if (this.mapTimeout) {\n        clearTimeout(this.mapTimeout);\n      }\n      this.mapIsOver = false;\n      this.mapTimeout = setTimeout(() => {\n        // Mouse is still not over.\n        if (!this.mapIsOver) {\n          this.buildingHighlightReset();\n        }\n      }, 500);\n    },\n  \n    buildingHighlightReset() {\n      this.mapTimeout = false;\n      this.buildingHideAll(false);\n    },\n  \n    buildingHideAll(activate) {\n      // Define add or remove class.\n      var method = activate ? 'add' : 'remove';\n    //   this.listSelection.each((index, zone) => {\n    //     // On all paths.\n    //     zone.classList[method]('discreet');\n    //   });\n    },\n  \n    buildingClick(building) {\n      \"use strict\";\n      // Do not allow building selection and search term in the same time.\n        semapps.domSearchTextInput.value = '';\n        semapps.schema.buildingSelect(building);\n    },\n  \n    buildingSelect(building, reloadSearch) {\n      \"use strict\";\n      // Deselect current.\n      this.pinsRegistry[semapps.buildingSelected] && this.pinsRegistry[semapps.buildingSelected].deselect();\n      let selected =\n          semapps.buildingSelected = building || semapps.buildingSelectedAll;\n      // Select new one.\n      this.pinsRegistry[selected] && this.pinsRegistry[selected].select();\n      // Reload by default.\n      (reloadSearch !== false) && semapps.goSearch();\n    },\n  \n    pinShow(building, text) {\n      \"use strict\";\n      if(this.pinsRegistry[building] != null)\n        this.pinsRegistry[building].show(text);\n    },\n  \n    pinShowOne(building, text) {\n      \"use strict\";\n      this.pinHideAll();\n      this.pinShow(building, text);\n    },\n  \n    pinHide(building) {\n      \"use strict\";\n      if(this.pinsRegistry[building] != null)\n       this.pinsRegistry[building].hide();\n    },\n  \n    pinHideAll() {\n      \"use strict\";\n      $.each(semapps.buildings, (building) => {\n          semapps.schema.pinHide(building);\n      });\n    }\n});"]}